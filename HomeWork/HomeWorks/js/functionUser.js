//#region TASK_1 
{
    //Retrieve the user's name
    function getUserName(messageForUser)
    {
        let userValue = null;
        userValue = prompt(messageForUser, 'YOUR NAME');
        try {
            if(checkAnswerUser(userValue)){
                return userValue;
            }
            else
            {
                if(userValue === "YOUR NAME"){
                    userValue = getUserName('–ù–∞–ø–µ–≤–Ω–æ –º–æ—è –ø—ñ–¥–∫–∞–∑–∫–∞ —Å–ø–∞–Ω—Ç–µ–ª–∏—á–∏–ª–∞ü§î —Ç–µ–±–µ. \n–ó–∞–º—ñ—Å—Ç—å "YOUR NAME" –≤–ø–∏—à–∏üñäÔ∏è —Å–≤–æ—î —ñ`–º—è.');
                }
                else if(userValue === ""){
                    userValue = getUserName('–£–ø—Åüò¨!!! –Ø–∫—Ç–æ —Å—Ç–∞–ª–æ—Å—è, —Ç–∏ –∑–∞–±—É–≤ü§∑‚Äç‚ôÇÔ∏è –Ω–∞–ø–∏—Å–∞—Ç–∏üìù —Å–≤–æ—î —ñ–º—è.');
                }
                else{
                    return null;
                }
            }
            return userValue;
        }
        catch (error) {
            console.error(error);
        }
    };
}
//#endregion



//#region TASK_2
{
    //Get three values from the user
    function getUserValue(messageForUser){
        let userValue = null;
        userValue = prompt(messageForUser);
        try{
            if(checkAnswerUser(userValue)){
            return userValue;
            }
            else{
                if(userValue === ""){
                    userValue = getUserValue('–Ø–∫–∞ –ø—Ä–∏–∫—Ä–∏—Å—Ç—åüòû, \n—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤üì¨ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫üö´.');
                }
                else
                {
                    return null;
                }
            }
            return userValue;
        } 
        catch (error) {
            console.error(error);
        }
    }


    //Get a number from the user
    function getUserNumber(messageForUser){
        let userValue = null;
        userValue = prompt(messageForUser);
        if(isFiveDigitNumber(userValue)){
            return userValue;
        }
        else{
            userValue = getUserNumber('–Ø–∫–∞ –ø—Ä–∏–∫—Ä–∏—Å—Ç—åüòï, \n—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –Ω–µüö´ —á–∏—Å–ª–æüî¢ –∞–±–æ –Ω–µ 5Ô∏è‚É£-—Ç–∏ –∑–Ω–∞—á–Ω–µ.');
        }
        return userValue;
    }


    //Split the number into digits
    function parseFiveNumber(number){
        let numderArray = String(number).split('').reverse();
        return numderArray.join(' ');
    }


    //Validate the input numder
    function isFiveDigitNumber(usernumber){
        if (!isNaN(usernumber)) {
            return /^\d{5}$/.test(usernumber);
        }
        return false;
    };


    //Concatenate the array randomly
    function randomConcatenation(userArray) {
        const shuffledArray = userArray.sort(() => Math.random() - 0.5);
    
        const result = shuffledArray.join(' - ');
        return result;
    }
}
//#endregion



//#region TASK_3
{
    //Retrieve the user's operation
    function getUserOperation(messageForUser){
        let userValue = null;
        userValue = prompt(messageForUser);
        try {
            if(checkAnswerOperation(userValue)){
                return userValue;
            }
            else{
                if(userValue !== null && typeof userValue !== 'undefined'){
                    userValue = getUserOperation('–Ø –Ω–µ –≥—É—Ä—Éüßò‚Äç‚ôÇÔ∏è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, \n–∞–ª–µ —Ç–∏ —Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ –Ω–µüôÖ‚Äç‚ôÇÔ∏è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é. \n–°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É');
                }
                else{
                    return null;
                }
            }
            return userValue;
        } catch (error) {
            console.error(error);
        }
    };
    

    //Retrieve the user's number
    function getUserNumber(messageForUser){
        let userValue = null;
        userValue = prompt(messageForUser);
        try {
            if(isNumber(userValue)){
                return parseFloat(userValue);
            }
            else{
                if(userValue !== null && typeof userValue !== 'undefined'){
                    userValue = getUserNumber('–©–æ—Å—å —Ü–µ –Ω–µ –¥—É–∂–µüôÖ —Å—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æüî¢. \n–°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É');
                }
                else{
                    return null;
                }
            }
            return userValue;
        } catch (error) {
            console.error(error);
        }
    };


    //Performs a mathematical operation on two numbers.
    function performOperation(numberOne, numberSecond, operation) {
        switch (operation) {
            case '+':
                return numberOne + numberSecond;
            case '-':
                return numberOne - numberSecond;
            case '*':
                return numberOne * numberSecond;
            case '/':
                return numberSecond !== 0 ? numberOne / numberSecond : '–ù–∞ –Ω—É–ª—å –Ω–µ –¥—ñ–ª–∏—Ç—å—Å—è';
            default:
                return '–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è';
        }
    }
}
//#endregion



//#region TASK_4
{
    //Retrieve the user's Hour
    function getUserHour(messageForUser) {
        let userValue = null;
        userValue = prompt(messageForUser);
        try {
            if(userValue !== null && typeof userValue !== 'undefined'){
                if (isNumber(userValue) || parseFloat(userValue) > 0) {
                    return parseFloat(userValue);
                }
                else{
                    userValue = getUserHour('–Ø–∫–∞ —Ö–∞–ª–µ–ø–∞ü§î! \n–¶–µ, —â–æ –∑–∞–≤–≥–æ–¥–Ωoü§Ø, –∞–ª–µ —Ç–æ—á–Ω–æ –Ω–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω. \n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—ÉüîÑüòä');
                }
            }
            else{
                return null;
            }
            return userValue === null ? null : parseFloat(userValue);
        } catch (error) {
            console.error(error);
        }
    }
}
//#endregion



//#region OtherMethods
{
    //Validate the input operation
    function checkAnswerOperation(userOperation){
        let listTrueOperation = ["+","-","*","/"]
        return listTrueOperation.includes(userOperation);
    };


    //Send a message
    function sendMessageForUser(messageUser){
        alert(messageUser);
    }


    //Validate the input
    function checkAnswerUser(userName){
        return userName !== null && userName !== "" && userName !== "YOUR NAME";
    };


    function isNumber(number) {
        const cleanedInput = number.replace(/\s/g, '');
        return !isNaN(parseFloat(cleanedInput)) && isFinite(cleanedInput);
    }


    function numberToTriads(number){
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
    }
}
//#endregion